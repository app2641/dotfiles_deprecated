
snippet log
  console.log(${1});

snippet capture
  Ext.util.Observable.capture(${1}, function(){
    console.log(${2});
  }, this);

snippet author
  /**
   * ${1}
   * Copyright (c) 2016 app2641
   */

snippet method
  ${1:initComponent}: function (${2}) {
    ${3}
  }

snippet items
  items: [{
    ${1}
  }]

snippet literal
  {
    ${1}
  }

#####################
# ExtJS snippet
#####################
snippet apply
  Ext.apply(${1:me}, {
    ${2}
  });

snippet superclass
  ${1}.superclass.${2:initComponent}.apply(${3:me}, arguments);

snippet parent
  ${1:me}.callParent(arguments);

snippet extend
  extend: '${1}'

snippet extend3
  Ext.extend(${1:Ext.util.Observable}, {

    ${2}

  });

snippet alias
  alias: 'widget.${1}'

snippet create
  Ext.create('${1}', {

    ${2}

  });

snippet widget
  Ext.widget('${1}', {

    ${2}

  });

snippet define
  Ext.define('${1}', {

    ${2}

  });

snippet window
  Ext.window.Window

snippet window3
  new Ext.Window({
    ${1}
  });

snippet panel
  Ext.panel.Panel

snippet panel3
  new Ext.Panel({
    ${1}
  });

snippet grid
  Ext.grid.Panel

snippet grid3
  new Ext.grid.GridPanel({
    ${1}
  });

snippet store
  Ext.data.Store

snippet tstore
  Ext.data.TreeStore

snippet model
  Ext.data.Model

snippet store3
  new Ext.data.JsonStore({
    autoLoad: true,
    autoDestroy: true,
    url: ${1},
    root: ${2},
    fileds: [{
      ${3}
    }]
  });

snippet tree
  Ext.tree.Panel

snippet tree3
  new Ext.tree.TreePanel({
    ${1}
  });

snippet loader
  new Ext.tree.TreeLoader({]
    ${1}
  });

snippet async
  new Ext.tree.AsyncTreeNode({
    ${1}
  });

snippet listeners
  listeners: {
    ${1}: {
      fn: function () {
        ${2}
      }
    }
  }

snippet onready
  Ext.onReady(function () {

    ${1}

  });

snippet keymap
  new Ext.KeyMap(docEl, {
    ctrl: ${1:true},
    key: ${2:'s'},
    scope: ${3:this},
    stopEvent: ${4:true},
    handler: function(){
      ${5}
    }
  });

snippet w
  width: ${1}

snippet h
  height: ${1}

snippet ns
  Ext.ns('${1}');

snippet quick
  Ext.QuickTips.init();

snippet me
  var me = this;

snippet reg
  Ext.reg('${1}', ${2});

snippet obser
  Ext.util.Observable

snippet task
  new Ext.util.DelayedTask(function () {
    ${1}
  });

snippet provider
  Ext.direct.Manager.addProvider(${1});

snippet msg
  Ext.window.MessageBox

snippet add
  ${1:me}.addListener('${2}', function (${3}) {
    ${4}
  });

snippet mask
  var mask = new Ext.LoadMask(Ext.getBody(), {
    msg: ${1}
  });

snippet msge
  Ext.Msg.show({
    title: 'Caution!',
    msg: ${1},
    icon: Ext.Msg.ERROR,
    buttons: Ext.Msg.OK
  });

snippet msgi
  Ext.Msg.show({
    title: 'Success!',
    msg: ${1},
    icon: Ext.Msg.INFO,
    buttons: Ext.Msg.OK
  });

snippet msgc
  Ext.Msg.confirm('Confirm', ${1}, function (b) {
    if (b == 'yes') {
      ${2}
    }
  });

snippet doc
  /**
   * ${1}
   *
   * @param ${2}
   * @return ${3}
   **/

snippet class
  /**
   * ${1}
   * Copyright (c) 2016 app2641
   */
